// Code generated for package main by go-bindata DO NOT EDIT. (@generated)
// sources:
// libloader/libloader.dll
package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// Mode return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _libloaderLibloaderDll = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x58\x6b\x6c\x1c\xc7\x7d\xff\xcd\xbe\xee\x41\x72\xa5\x3d\x52\x27\xca\x22\xa9\x93\x25\xca\x67\x52\x3a\x1d\x79\x47\x4a\x94\xc5\x9a\x8f\x3b\xc9\x97\x1c\x1f\xe1\x51\x92\xe3\xa4\x21\xf7\xee\x86\xd4\xd6\x7b\xbb\xe7\xdd\x3d\x59\x57\xd9\xae\x60\xd8\x69\xdd\xc0\x4e\x53\x03\x86\xeb\xb4\x45\xa1\x26\x6d\x03\x04\xa8\x5a\xd8\x6d\xe2\x22\x41\x85\xe4\x43\x80\xc4\x50\x81\x36\x68\xf2\xc1\x48\x53\x14\x68\x0b\x04\x48\x5b\x34\x1f\x1c\xa0\x56\x31\xb3\x7b\x0f\x8a\xf2\x23\x1f\x8a\xf4\x83\x47\xe2\xec\xff\xff\x9b\xff\x7b\x66\x67\xe6\x76\xe9\xb1\xdf\x81\x08\x40\x02\x70\xe7\x0e\xf0\x35\xf8\x6d\x0e\x1f\xdc\xae\x03\x50\x0f\xbd\xa9\xe2\xf5\xc8\x5b\x87\xbf\x46\x8a\x6f\x1d\x5e\xbf\x6c\xb8\x89\xba\x63\x6f\x3b\x7a\x2d\x51\xd1\x2d\xcb\xf6\x12\x65\x9a\x70\x1a\x56\xc2\xb0\x12\xb9\x95\x52\xa2\x66\x57\x69\xaa\xaf\x2f\x7a\x34\xb0\xb1\x9a\x07\x8a\x44\xc4\x27\x7f\xfb\xec\xab\x2d\xbb\xff\x84\xfb\x13\x3d\x24\x0d\xc4\x01\x28\x3e\xf6\x4a\x16\x40\xa2\x1d\xd8\x5e\x4e\x0b\x7e\xdc\x40\xe7\xc9\x83\x12\x7c\x52\xc4\xe6\xf3\x4c\x94\xfd\xef\x3c\xdb\x0f\xde\x72\x59\x60\x25\x48\xb8\x2e\xde\x23\xc9\x4d\xa0\x17\x40\x32\x0b\x0c\x7d\x88\x9a\xb4\x5b\x02\x08\x77\xb1\xe1\x04\xf0\x48\x17\x9f\xf2\xe8\x55\x0f\xc0\xef\x0f\x04\x79\xc5\x3b\x71\x77\x99\xd8\x4c\x39\xae\x53\x41\x10\xdb\x5c\x90\xe8\xe0\x4e\xb9\x39\x60\x2e\xe5\x50\xd3\xae\xf8\xb1\xb2\x98\xb9\xad\xa1\x5d\x72\x0b\x77\x87\x79\x35\xeb\x3f\x1f\xe1\x2a\x32\xbe\x33\x0a\x6c\xaa\x00\xf9\x45\x72\xed\x6a\xfd\x69\x05\xbf\x05\xae\xaf\x39\x04\xa8\xc7\xdd\x1e\x20\x1a\x55\x92\xbd\x40\xd4\xee\x63\x9d\x0a\x44\x9d\x7d\x40\xdd\xde\x03\x44\x7b\x42\xce\x2c\x50\xdf\xff\x22\xf3\x3a\x1a\xff\xbb\x3e\x80\x24\xf7\x02\xd1\x1b\xb6\x06\x44\x7b\x43\x03\xc9\x18\x10\x3d\x7e\x3a\x3c\x90\xec\x67\xc4\xc9\x50\x72\x00\x88\xf6\x85\x23\xfb\x5f\xec\xe5\x3a\xc9\x7d\x5c\x3c\x0e\x44\x8f\x75\x50\x25\x40\xc6\x46\x84\xe4\x7e\x20\x3a\xd6\x9f\x96\x70\x96\xf0\xd2\x68\x3e\x24\x24\x07\x81\xe8\xe8\x09\xe5\x98\x73\x01\xa8\x3f\x4d\x00\x49\x70\x2e\x01\xf5\xe4\x01\x3e\x20\x1d\x1b\x18\x97\xed\xfb\x76\x08\x09\x5c\xa8\xf9\xfe\x42\x22\x17\xfa\xf3\xf7\x17\x92\x98\x90\x70\x8d\xc9\x72\x20\x79\x90\xe5\x17\x0b\x90\xb7\x5a\xc8\x38\x89\x3f\x2d\x33\x51\x77\x08\x88\x3e\xad\xb0\xc1\xbf\x7f\x5f\xcb\x87\x9e\x8a\xdb\xc3\xac\xec\xf1\x9e\xf1\x69\x25\xf4\x5a\x6f\xd8\xb7\x3f\x02\x44\x4f\x1c\x0e\x1f\x3a\xe3\x0f\xf7\x45\x5e\x32\x06\x33\x9a\x70\x8d\x99\x8c\xc4\x5f\x8b\xec\x7f\xcd\x3e\x04\x44\x43\xfb\x1f\xed\x09\x29\x2f\x19\x93\xdf\x16\x84\x6b\x2c\xdd\x43\x0f\xf9\x0a\x4f\x87\x00\x69\xec\x15\x51\x78\x57\x91\x01\xc5\x4d\xb0\xe9\x3c\x0c\x44\x19\xa2\x30\xe4\x7e\x86\x1c\x61\xd5\x66\x6b\x41\xc2\x26\x61\xef\x21\x34\xe1\x1a\x53\x8d\xc6\x7b\x4e\x9f\x27\x00\x0f\x29\x79\x14\x88\x9e\xc9\x12\x20\x9c\x1c\x65\x81\xf5\x0b\xd7\xd8\x04\x38\x7b\x08\xea\xe1\xe4\x31\x9e\x79\xb8\x4f\xb2\x1f\xe8\x4e\xad\x5f\xd2\xba\x8a\x75\x42\xd2\xa4\xf1\x5e\xa7\x9f\xa0\xae\x49\xc9\x24\x10\xed\x97\x25\xfb\x41\xb6\xc0\x46\x09\xea\x3e\xa2\x08\xd7\x58\xf9\x66\x7e\x13\xc0\x5d\xca\xca\xb8\xaa\xf9\x0e\x35\x85\x7b\xec\x0f\xfb\xd5\xd0\xc2\x49\x02\x8c\x77\xdc\x46\x0e\x45\x5e\x1c\xe4\xeb\x2a\x72\x63\x74\x3f\x57\xb9\x31\x3a\xa8\xc9\x37\x46\x0f\x04\xcc\x7d\x9a\x72\x63\xf4\x60\xc0\x0c\x69\x91\x1b\xa3\xc3\x01\x33\xa2\x29\x37\x92\xe3\x40\x34\x79\x9c\xb9\x08\x8d\xa7\x0f\x7e\x08\x5b\xdd\x1a\x5a\x28\x79\x82\xad\x8d\x88\xa8\x85\xf8\xfb\x33\xd6\x9a\xa3\x87\x6f\xbe\x7b\xe7\xce\x00\x5f\xdb\x3f\xf0\xb7\x87\xae\x5a\xff\x0d\x76\xd4\xfa\xcf\xf0\x41\xb5\x4e\x86\x00\xa5\x5f\x8a\xf7\xcb\xe3\x57\x34\x49\x93\x5f\x6b\x15\xef\xf8\xf4\x8e\x90\x4f\xfa\x21\x0b\xd7\xd8\x12\x7e\xef\xb0\xc7\x07\x22\xdd\xc5\xbd\x2b\x19\x55\x0b\xc5\xc2\xc9\x14\x23\x45\x2d\x3c\xa6\xc9\xfb\x1f\xed\x97\x35\x59\x93\x5e\x32\x26\x9f\x6d\xe7\x77\xf6\xce\x9d\x3b\xcf\x9c\x6c\xbd\xbf\x7b\x08\x20\x03\x9a\x9b\x66\xcb\x3b\x39\xc1\xac\x4e\xb2\x2e\xd3\xa2\x7a\x8e\x2f\x2b\x82\x9d\x65\x6f\x37\x5f\x03\xf6\x14\x4b\xfd\x1f\xd8\xfe\xe6\x14\xda\xfc\xb7\x59\x65\x84\xce\x22\xe1\x0a\x8a\x2f\xd1\x01\x4e\xff\x01\x80\x50\xdb\xa0\xe2\x94\x08\xea\x42\x67\x5c\x70\x3e\xd5\xb2\x78\xa2\xa1\xf8\x5c\x97\x39\x5f\xdc\x47\x8f\xb5\xd0\xf1\xe2\x7b\x5b\x33\xda\xd6\x1e\x50\x7c\x6e\xb7\x35\x63\x87\x35\xc5\x9e\xe6\x2f\xdb\x42\xe9\x63\x0b\x24\xd8\xb5\xd9\x19\x70\x25\x9b\x4a\xa7\x32\xe9\xcc\xc4\x0c\x43\x64\x98\x00\x4e\x4b\xc0\x91\x67\x80\x2f\x49\xc0\x0f\x64\xe0\x48\xc9\x73\x0c\x6b\xdb\x65\x12\x4f\x45\x01\x8f\x00\x47\x2e\x94\xf0\x1f\x3d\xfe\x19\x79\xe4\xfc\x85\x42\x2e\x30\xb8\x29\x00\x47\x16\x4c\xbb\x1c\xec\xf3\x02\x40\x2e\xed\x13\xc2\x11\x76\xc8\xfd\x9c\x64\xd8\xf9\xc5\xbc\xdf\xcf\xcf\x5d\x20\x14\xfc\xb1\xe3\x7b\x1a\x40\x94\x47\xe1\x1f\x5f\x24\x18\xf3\xa3\x3d\x28\xfa\x4f\x05\x03\xc2\xa7\x25\x05\x5b\xbc\xb7\xc8\x11\x69\x0f\x9e\x92\x18\xfe\x7b\xe4\xf3\x82\x82\x25\xe1\x65\x51\xc1\xcf\x08\xeb\xff\x92\xf7\xb7\x79\x9f\xe5\xf8\xb3\x9c\xee\x95\xe7\xc4\x28\x4e\xc9\x6f\x88\x0a\x3e\x43\xe6\x44\x05\x5f\x16\x5f\x16\x55\x68\xb8\x0e\x05\x8e\xcc\x64\xc6\x08\x43\x08\x47\xfe\x0d\x4c\xa6\x57\x62\x7d\x85\x5b\xf8\xb8\xcc\xe8\xbf\x12\x58\xff\x23\x8e\x8f\x60\x4e\x8c\xe1\x5f\x85\x8b\x50\xf1\x65\x89\x69\x85\x71\x1d\x71\xf4\x92\x8b\xb8\x0f\xcf\xc9\xb3\x92\x82\x21\x69\x4e\x1c\x41\x41\x9c\x95\x46\x70\x5d\x9c\xe5\x97\x91\x51\x9e\x95\x3f\x27\x7b\xf1\x33\x01\x98\xe0\x1c\xc1\x5e\x7c\x57\xfc\x9e\xcc\x38\x11\xc7\xb0\x84\x5f\x25\xc7\xb0\xc9\xfb\xdb\xbc\x3f\xc3\xfb\xb7\xb0\x49\x8e\xe1\x2b\x42\x85\x1c\xc3\xb4\xf4\x38\x59\x65\xb7\x04\xbc\x82\xe7\x04\x9b\x10\xfc\x0b\xe7\x3e\x3b\x18\x97\x14\x10\xfc\x64\x07\x97\xbd\x9f\x73\x48\xc1\x25\x04\x9f\x0e\xb8\xff\x16\x9b\x44\xc0\x77\x8e\xf8\xdc\x8f\xc4\x67\x89\x84\xaf\x1e\xf5\x6d\xbe\x29\xbd\x40\x14\x1e\xed\x45\xb9\xd5\x0b\x38\x45\x18\x7d\x8d\xd3\x39\x4e\xe7\x48\x04\x71\x89\x40\x03\xf3\x74\x00\x71\x29\x8a\x07\x11\x97\xf6\x62\x82\xf7\x33\xbc\x9f\xe7\x7d\x81\xf7\x9f\xe0\xfd\x27\x79\x6f\x20\x2e\x1d\xc2\x0b\xd8\x92\x47\xf1\x02\xd6\xc5\x31\x18\xf8\x47\x21\x85\x17\xf0\x29\x92\xc5\x13\xf8\x39\xce\xe0\x09\xbc\x8e\x79\x3c\x81\x9b\xf2\xc7\xd0\xc4\x4d\x79\x0d\x5f\xc1\x37\xf1\x18\x0c\x1c\x90\x37\xf1\x17\xf8\x31\x28\x74\xee\xfd\xeb\xf8\x5d\xb9\x81\xaf\xe3\x2a\x9a\xd0\xf1\xba\x30\x86\x5b\xb8\x29\x3f\x83\x5e\x3e\x7a\x0b\xfd\xf2\xe7\x70\x0b\x5f\xe2\xc8\x83\xe2\xcb\x18\x40\x5c\xfa\x13\x18\xf8\x86\xf0\x55\x0c\x05\x34\x11\xbf\x85\x5b\xf8\xa6\xfc\x36\x7e\x88\x3f\xc5\xdb\xb8\x05\x59\xfe\x67\x7c\x01\xf7\x91\x31\x4e\xff\x3b\xbe\x00\x8d\x8c\xe1\xc7\x18\x95\x7f\xca\x11\x89\xfc\x10\xdf\x15\xa2\xe4\x3f\xf1\x5f\xd2\xdb\x78\x07\x5f\xc4\x30\x21\xe4\xa6\x78\x94\x1c\xe5\x7e\x23\xe4\x1d\x69\x9a\x68\xe4\xbc\x78\x96\x44\x48\x1d\xd3\xe4\x28\xfe\x18\x8b\xe4\x16\x7e\x22\x14\xc8\x51\x7c\x46\x5e\x26\x29\xf4\xe0\xf3\x24\x85\x7e\xbc\x4a\x52\x38\x88\xbf\x26\x29\x1c\xc1\xdf\x92\x14\xc6\x21\x0a\x29\x64\x10\x13\x52\x78\x08\x87\x84\x14\x16\x71\x5c\x48\xe1\xe3\x1c\x2f\x41\x14\xf6\xc1\xc4\x6d\xec\x21\x0f\x90\xe7\xf0\x45\xbc\x89\x34\x91\xae\x83\xaf\xa4\x4e\xfb\x3e\xbb\x3e\x40\x68\xdf\xe1\xd6\x49\x91\x93\x52\xd7\xad\x6e\x9d\xbc\x21\xb6\xb0\x8e\xdc\xf7\x24\x1f\xeb\xd6\xfd\x9c\xb4\x5b\x6e\x52\xdc\x2d\x37\x1b\xc8\xa1\x1d\xcb\x3a\xd1\x39\x79\x01\x77\x7c\xa0\x68\xb8\xde\xe6\x04\x0a\x6b\x54\xaf\xae\x58\x66\x33\x67\x54\x3c\xc3\xb6\x74\xa7\xb9\x39\x89\x73\x0d\xab\xb2\x99\xc1\xd9\x25\xbb\xda\x30\xe9\xaf\x60\x8d\x6e\x1b\xae\x47\x9d\xf9\xe2\x22\x4a\x97\x75\x87\x56\xd7\x1a\x96\x67\xd4\xe8\x7c\xbd\x5e\xc8\x61\x7e\x75\x75\x63\x61\xbe\x94\x47\xa9\xe9\x7a\xb4\x96\x2a\xac\xa0\x58\x58\xd8\xc8\x15\xd6\xf2\x8b\xeb\x2b\x6b\x85\x7c\x09\xdb\xd4\xdb\x58\x29\x3d\x8a\xf3\xd4\xcb\xe9\x9e\xde\x92\x5c\xb4\x4d\x93\x72\xc7\x6e\xea\x3c\xb5\xa8\x63\x54\xb0\xee\x34\x8b\xb6\x5e\xc5\x7c\xb5\x8a\x82\xbb\xaa\x7b\x97\xd7\x6c\xdb\xa3\x55\xa6\xbb\x44\xbd\xcb\x76\x15\x8b\x0e\xd5\x3d\x5a\xb0\x5c\x4f\xb7\x2a\x14\x05\x77\x47\x50\x4b\x76\x95\xa2\x60\x5d\xb1\x1f\xa7\x08\xa0\xf5\x66\x9d\x3e\xa2\x5b\x55\x93\x32\x2b\x8c\x3b\xe7\xd8\xb5\x00\x39\x67\x98\x94\x07\xb8\xac\xd7\x7c\x62\xb1\x61\x7a\x0d\x87\x72\x7e\xde\x75\x69\xad\x6c\x36\x39\xa3\x77\x33\x55\xd3\xb4\xd8\x33\xc8\x25\x70\xd5\x72\x00\x3f\xd6\x05\xdd\xa5\xc8\xd1\x72\x63\x7b\x5b\x2f\x9b\x74\xde\xf3\x1c\xa3\xdc\xf0\x3a\x76\xd7\x0d\xaf\x1b\x5e\xd7\x9d\x6d\xea\x9d\x73\xf4\x1a\x7d\xd2\x76\x1e\xdf\x2d\xcf\xa2\xbd\x48\x1d\xd7\xb0\xad\xdd\x83\x05\x6b\xcb\x76\x6a\x3a\x9f\x49\xf3\x3d\xa5\x16\x6d\x6b\xcb\xd8\x6e\x38\x5c\xae\x33\xbc\x68\xd7\xea\x86\xc9\xc1\x35\x6a\xea\x57\x39\xe5\xee\x56\x5f\x75\xec\x6a\xa3\xe2\xdd\xcb\x6e\xad\xae\x5b\xcd\xce\x40\x50\x12\x8e\x7b\x46\xd9\x30\x0d\xaf\x6b\xb4\x60\x19\x9e\xa1\x9b\xc6\xaf\xdf\x5d\xc2\x54\x10\xb9\x61\x6d\xc3\x75\x6a\x4b\x7a\xbd\xce\xc8\x75\xdb\x3f\x24\xa1\x57\xab\x1b\x6b\xd4\xb5\xcd\x2b\x8c\x3b\x4f\xbd\x73\x0d\xd3\x64\x0b\x05\x6c\xe1\xb0\x99\x6d\x87\xca\xc0\xbc\x55\x75\x2f\x19\xde\x65\x94\x3c\xdd\xf1\x1a\xf5\x47\x6c\xfb\xf1\x9d\x36\x2e\x58\x35\xdd\xd2\xb7\x69\x35\x67\x9a\x30\x8d\xb2\x69\xeb\x55\xea\xa4\xaa\xa6\x09\x97\x7a\x1b\x05\x8f\xd6\x3a\x6b\x3b\xc5\x66\xc0\xe7\x50\x70\x57\x4a\xab\xa6\xee\xb1\xaa\xf3\x95\x53\xb4\x2b\xbc\x6c\x77\x67\x54\xb0\x3c\xea\xd8\xf5\x12\x75\xae\x18\x15\xea\xb6\xf0\xae\xf9\x6a\x6b\xd0\xad\xe0\x95\x08\x56\x10\x93\xc1\x63\xd4\xb1\xef\xb6\x59\xe4\x51\xa2\x68\x94\x03\xaa\x1d\x39\xba\x13\xf2\xb3\xa4\x0e\x96\x7c\xa8\x55\x9b\x36\x3e\x5f\xf1\x8c\x2b\xba\x67\x3b\x48\x55\x58\x5f\xb0\xbc\x55\xcf\x69\x79\xcb\x19\xfa\xb6\x65\xbb\x9e\x51\x71\x51\x77\xec\x32\x75\x3f\x20\xb7\xbb\x87\xfd\x65\x45\x9d\xf6\xb8\xff\x36\x18\xd6\x36\x7b\x51\x77\x89\xe7\xaf\x7a\xd4\x62\xb3\xef\xa2\xb3\x3b\x74\x81\xb9\x62\x91\xbd\x7d\x17\x75\xc7\xf0\x17\xe8\x3d\xf6\x12\xf8\x0b\xa5\x54\x37\x0d\x6f\xa5\xee\x43\xf9\xab\x86\xeb\xb9\x7c\x92\x2e\x19\x56\xd5\x7e\x92\xd9\xb7\x2a\xba\x87\x95\xf2\xaf\xd1\x8a\x07\x2e\xcd\xc7\x73\x74\x4b\x6f\x98\x1e\x5b\x59\x17\x75\xb3\x41\x57\x9c\x16\xd2\xaa\x1d\x2b\xf8\xa2\x6d\xf1\x0f\x07\xf3\xf5\x7a\x8b\xac\x04\xcf\x75\x7b\xde\x71\xf4\x26\x33\x90\xbf\x4a\x2b\x0d\xcf\xb0\xb6\x5b\xaa\xed\x3d\x04\xcb\xba\x67\x5c\xa1\x45\xa3\xec\xe8\x4e\x93\x3b\x66\x9b\x45\xce\x70\x28\x9b\x86\x26\xec\xfa\x46\xfe\x89\x86\xce\x5e\x1a\x46\x17\x2c\xda\xe2\x0a\xee\x72\xc3\x34\x57\x9c\x7c\xad\xee\x35\xb1\x4c\xbd\x05\xaa\x37\xbc\x26\xff\xd1\x5f\x84\x81\x32\x8a\xb0\xa1\xa3\x0a\x0a\x07\x78\x60\x19\x14\x1e\x16\xf8\x79\xdd\x80\x87\x26\x52\xb8\x87\xdc\xfe\x35\x50\x6c\xc3\x80\x0b\x8f\x23\xf3\x28\x62\x91\x1d\x69\x87\x77\x5b\xf0\xf5\x5d\xe4\x60\x30\xdd\xa9\xdd\x12\x25\x5c\x86\x0e\x07\x14\x55\xac\xa1\x01\x0b\x1e\x0c\xd4\x40\xb1\x04\x9b\xfb\xc4\xf0\x6e\xad\x79\xd4\x51\x47\x01\x39\x40\xb6\x60\x03\x0f\xfd\x62\x96\x75\xae\x6f\xc0\xc2\x36\x20\x9e\x04\x34\x13\x36\x2a\xd0\x61\x82\xc2\xc5\x49\x20\x92\x42\x15\x26\xbb\x87\x1f\x38\x09\x17\x0e\x6a\xd8\x80\x05\x9d\x5b\xb9\x02\x1a\xc8\x50\x5c\x65\x31\x86\x4c\x9e\x29\xfa\x98\x56\x13\x01\x17\x4a\xc1\x65\xd1\xb1\x1b\xe5\xed\xe9\xe3\xb7\xff\xe8\x7f\xe6\xfe\xf0\xb0\xf4\xc6\xd0\x3b\xdf\x1a\x82\x94\x20\x24\x2c\x26\x40\xe4\x04\x21\x9a\xc6\x58\x35\x12\x92\x62\x53\xb1\x99\xd8\xec\x90\x9c\x10\x88\x2a\x48\x40\x2c\x2f\x26\xa0\xca\x09\x12\xcb\xf3\x7e\x46\x55\x40\x62\x33\xda\x27\xc2\x09\x21\x36\xab\x0e\xc7\x66\x42\x10\x84\xd8\x4c\xf0\x9c\x8d\xcd\xca\x20\x43\xb1\x19\xa6\x3a\xa5\x24\x84\xa1\xa1\xe1\xa1\x70\x48\x1a\x56\xc3\xea\xb0\x2a\x02\xaa\x04\x32\xa4\xca\x10\x04\x55\x55\xf6\xc5\xe6\x05\x55\x0d\x25\x84\x61\x55\xd4\x68\x28\x21\x90\x7e\xf4\x93\xe8\xbe\x98\x21\xc6\xa6\x62\x85\x58\x9e\x85\x31\x34\xd8\x97\x20\xa4\x83\x85\x39\x99\x57\x07\x7b\x5a\x70\x5e\x1d\xec\x0b\x45\x99\x8b\xa0\x49\x20\x82\xaa\x40\x64\xb4\x0c\x41\x55\xd5\x3d\x7b\x05\x61\x84\xec\x8b\x35\x84\x11\x8c\x90\x11\x48\x51\x81\x0d\x11\x75\x98\x09\xab\x6a\x5f\x28\xc2\xf5\x79\x37\xa8\xb0\xf0\xf6\x0e\x0a\xca\x60\x38\x24\xec\x8b\x2d\x11\x55\x90\xf9\x83\xfd\x92\xbc\xfe\xbc\x02\x22\x68\xd7\x9f\x67\x85\xeb\x67\x75\x14\x54\x39\x81\xe1\x7e\x84\x6f\x3e\xbc\xf1\x1b\xda\xf7\xa3\x67\x04\x45\x15\x14\x21\x14\xe4\x27\x2a\x3c\x73\x5e\xe8\xd8\x14\xab\x5b\x9e\x65\xa2\x24\x84\x41\x56\x54\x90\x61\x55\x0d\x93\xe0\xeb\xdf\x08\xbb\x36\xad\x0b\xf1\x4b\x8e\x5e\x5f\x66\x7b\x4a\x85\xf2\xbd\x61\xfd\xb2\x63\x3f\xe9\x92\x30\x09\x3e\xfa\x2d\x10\x0c\xa6\x96\xf3\xeb\x8b\xb6\xc3\x2e\x38\xc7\x83\xd3\x68\xf6\x4a\x26\x95\x26\x58\x57\x07\xda\xa7\x73\xce\x70\xeb\xa6\xce\x6f\x03\x7d\x4c\x23\xc1\x54\x12\x99\x54\x5a\x25\x88\x74\x76\x63\xf4\x12\x84\xd6\xa8\x49\xd9\x5d\x80\x33\x13\xa9\x4c\x2a\x9d\x4a\x03\x19\x82\x14\x67\xc6\xd3\x13\x99\x6a\xb9\x52\x3e\x95\xad\x4c\xd3\xad\xc9\xa9\x99\xec\x64\x55\x4f\x4f\x4f\x95\xab\x13\x13\xa7\x32\x93\xe9\xad\x74\x26\x3b\xa3\x67\xd2\x13\x3b\xbf\xf1\xed\xbd\xeb\x9b\x9f\x99\xed\xd0\x9f\x6d\x7d\xa7\xbd\x47\xbb\x9a\xed\xe6\x36\x16\x6d\x27\x67\x9a\x4b\xba\x61\xa1\xe6\x56\x6c\x87\x52\x7e\xf8\xb1\x76\x67\x14\x89\x5d\x6e\x3e\x6a\xff\xe7\x8d\xf0\xa2\x0f\xfa\x5f\xd1\x77\xe0\xec\x9e\x9f\xbe\x07\x8e\xe0\xdb\xf1\xa3\x73\xc0\x40\xd7\x8f\x90\x01\x91\x4d\xf6\x45\x94\xb0\x81\x8b\xc8\x63\x0d\x25\x14\xb0\x82\x65\x6c\xa0\x80\x65\x9c\xf3\xbf\xba\xe3\x1b\xd2\x4f\xdf\xf5\x7f\xbf\xf8\xb6\x5a\xcf\x87\x03\x3b\xd2\xee\xcf\xe2\x6c\x97\x66\xbf\x51\xf9\x6e\x7c\x0e\x06\xdf\x63\x0b\xb0\xb0\x15\xec\x8d\x47\xb9\xd6\x3a\x1c\xe8\xb0\xe0\xc2\x0c\x76\x59\x1b\x56\x60\xe1\xa6\xe4\x09\xcc\x46\x09\x1e\x9c\x60\xdf\xde\x6d\x69\x95\xcb\xa4\xdb\xff\xb2\x28\xb3\x1a\x20\x8b\x28\x08\x16\x61\xa3\x86\x3a\xf7\xd1\xc4\x32\x74\x7e\x16\xb0\xe6\xef\xd6\x66\xf7\x29\x87\xb3\x5c\xa7\xe5\x23\xc7\x4f\x85\x0a\xf7\x5d\xdf\x11\xdb\xbd\x74\xd3\x08\x77\xe9\x5e\xe4\xa8\xdb\xa5\x33\x01\xf6\x9b\x31\x85\x34\xff\x63\xbe\x54\x10\x9e\x87\x7f\xa2\x5a\xfc\x1c\xea\x44\xb8\xdb\x47\xfb\x6c\x42\x92\xff\xa6\x2b\xf2\x33\x99\x69\xb1\x2c\xeb\x68\xf2\x48\xb7\x71\x19\x5e\xf0\x7a\xe7\xb8\x8f\x95\x00\x37\x02\x1f\xad\x18\xad\x0f\xe5\xcb\xaf\xe3\x2a\x1c\x7e\x32\x37\x50\x81\xf7\x81\x75\x7c\x16\x27\x77\xe9\xdc\x5d\x91\x4e\x3d\xc6\x91\xc6\x04\x32\xa8\xa2\x8c\x0a\xca\x38\x85\x2c\x2a\x98\x06\xc5\x16\x26\x31\x85\x19\x64\x31\x89\x2a\x74\xa4\x31\x8d\x29\x94\x51\xc5\x04\x26\x70\x0a\x19\x4c\x22\x8d\x2d\xa4\x91\x41\x16\x33\xd0\x91\xe1\xb6\x58\x3b\xcd\xe7\x63\x1e\x2e\x5c\x50\xd4\x78\x8c\x4d\x24\xde\x27\x0e\x7f\x5e\xfe\x5f\xb6\xb4\xff\xbd\xf0\xd5\xec\x2f\x3b\x90\x8f\xda\x2f\xa3\xfd\x6f\x00\x00\x00\xff\xff\x62\xfc\xb2\x2d\x00\x1e\x00\x00")

func libloaderLibloaderDllBytes() ([]byte, error) {
	return bindataRead(
		_libloaderLibloaderDll,
		"libloader/libloader.dll",
	)
}

func libloaderLibloaderDll() (*asset, error) {
	bytes, err := libloaderLibloaderDllBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "libloader/libloader.dll", size: 7680, mode: os.FileMode(438), modTime: time.Unix(1748107812, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"libloader/libloader.dll": libloaderLibloaderDll,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"libloader": &bintree{nil, map[string]*bintree{
		"libloader.dll": &bintree{libloaderLibloaderDll, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
