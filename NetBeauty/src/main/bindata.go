// Code generated for package main by go-bindata DO NOT EDIT. (@generated)
// sources:
// nbloader/nbloader.dll
package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// Mode return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _nbloaderNbloaderDll = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x58\x6b\x6c\x1c\xc7\x7d\xff\xcd\xbe\xee\x41\x71\xa5\xbd\xa3\x28\xca\x26\xa9\xd3\x83\xf2\x85\x94\x4e\x47\xf2\x48\x89\xb4\x54\x89\xe4\x9d\xa4\x4b\xf9\x32\x8f\x96\x14\xa7\x2d\xb9\xbc\x1b\x52\x1b\xef\xed\xae\x77\xf7\x68\x5e\x15\x3b\x8a\x11\xb7\x31\x0a\xdb\x49\x5a\x04\xad\x83\x16\xa8\x1a\xb4\x0d\x1a\xa3\x6e\x21\x34\x0f\x23\x45\x85\xe4\x83\xdd\xc2\x75\x81\xa4\x68\x02\xc4\x40\x53\x14\x68\x8a\x06\x30\xf2\x21\x45\x9b\x0f\x66\x31\xb3\x7b\x0f\x92\xf2\x23\x5f\x9a\x7c\xc8\x48\x9c\xfd\xff\x7f\xf3\x7f\xcf\xec\xcc\xdc\xce\x3d\xf6\x19\x88\x00\x24\x00\xdb\xdb\xc0\x57\x11\xb4\x4b\x78\xff\x76\x1b\x80\x7a\xe4\xeb\x2a\xee\xc6\xde\x38\xfa\x55\x32\xfb\xc6\xd1\xe5\x9b\x86\x97\x72\x5c\x7b\xc3\xd5\xab\xa9\xb2\x6e\x59\xb6\x9f\x5a\xa3\x29\xb7\x66\xa5\x0c\x2b\x95\x5f\x28\xa5\xaa\x76\x85\x66\x3a\x3b\xe3\x27\x42\x1b\x8b\x05\x60\x96\x88\x88\x7c\x5b\x7d\xad\x61\xf7\x5f\x71\x2c\xd5\x41\xb2\x40\x37\x00\x25\xc0\x5e\xc8\x01\x48\x35\x03\x3b\xc0\x69\x21\x88\x1b\x68\x3d\x79\x50\x42\x40\x8a\x58\x7d\x96\x89\xb2\xff\xad\x67\xf3\xc1\xdb\xf9\x1c\xb0\x10\x26\xec\x88\xf7\x49\x72\x15\xd8\xc7\x5c\xe7\x80\xde\x0f\x50\x93\x66\x4b\x01\xd1\x36\x36\x9a\x02\xae\xb6\xf1\x19\x9f\x6e\xf9\x00\x7e\xaf\x2b\xcc\xab\xbb\x15\x77\x9b\x89\xd5\x8c\xeb\xb9\x65\x84\xb1\x5d\x0a\x13\xed\xd9\x29\x77\x09\xb8\x94\x71\xa9\x69\x97\x83\x58\x59\xcc\xdc\x56\xef\x1e\xb9\xe9\xdd\x61\x3a\xb9\xe0\x79\x95\xab\xc8\x78\x6d\x00\xb8\xa1\x02\xe4\x67\xc9\xb5\xad\x25\xb3\x0a\x3e\x0d\xae\xaf\xb9\x04\x70\xba\xbd\x0e\x20\x1e\x57\xd2\xfb\x80\xb8\xdd\xc9\x3a\x15\x88\xbb\x49\xc0\xb1\xf7\x03\xf1\x8e\x88\x3b\x01\x38\x87\x9e\x67\x5e\x07\xba\xff\xa9\x13\x20\xe9\x03\x40\xfc\x8e\xad\x01\xf1\x7d\x91\xae\x74\x02\x88\x9f\x3a\x17\xed\x4a\x27\x19\x71\x26\x92\xee\x02\xe2\x9d\xd1\xd8\xa1\xe7\xf7\x71\x9d\xf4\x41\x2e\xde\x0d\xc4\x4f\xb6\x50\x25\x44\x06\xfb\x85\xf4\x21\x20\x3e\x98\xcc\x4a\x38\x4f\x78\x69\xb4\x00\x12\xd2\x3d\x40\x7c\xe0\xb4\x72\xd2\x7d\x04\x70\x9e\x22\x80\x24\xb8\x25\xc0\x49\x1f\xe6\x03\xd2\xc9\xae\x21\xd9\x7e\x60\x87\x90\xc0\x85\x6a\xef\x2d\x24\x72\xa1\xbf\x78\x6f\x21\x89\x09\x09\xb7\x98\x2c\x07\xd2\x0f\xb2\xfc\x12\x21\xf2\x7a\x03\x19\x22\xdd\x4f\xc9\x4c\xd4\xeb\x05\xe2\x4f\x29\x6c\xf0\xcd\xf7\xb4\x7c\xe4\xe3\xdd\x76\x1f\x2b\x7b\x77\xc7\xd0\xb8\x12\x79\x69\x5f\x34\xb0\xdf\x0f\xc4\x4f\x1f\x8d\x1e\x99\x0c\x86\x3b\x63\x2f\x18\x3d\xa3\x9a\x70\x8b\x99\x8c\x75\xbf\x14\x3b\xf4\x92\x7d\x04\x88\x47\x0e\xdd\xe8\x88\x28\x2f\x18\x23\xdf\x12\x84\x5b\x2c\xdd\x23\x0f\x07\x0a\x4f\x45\x00\x69\xf0\xf3\xa2\xf0\x8e\x22\x03\x8a\x97\x62\xd3\x79\x14\x88\x33\x44\x61\xc8\x31\x86\x1c\x67\xd5\x66\x6b\x41\xc2\x2a\x61\xef\x21\x34\xe1\x16\x53\x8d\x77\x77\x9c\xbb\x42\x00\x1e\x52\xfa\x04\x10\x9f\xcc\x11\x20\x9a\x1e\x60\x81\x25\x85\x5b\x6c\x02\xdc\x0e\x02\x27\x9a\x3e\xc9\x33\x8f\x76\x4a\xf6\x43\xed\xa9\x25\x25\xad\xad\x58\xa7\x25\x4d\x1a\xda\xe7\xee\x27\x70\x34\x29\x9d\x06\xe2\x49\x59\xb2\x3f\xc4\x16\xd8\x51\x02\x27\x40\x14\xe1\x16\x2b\xdf\xc4\x6f\x03\xd8\xa5\xac\x0c\xa9\x5a\xe0\x50\x53\xb8\xc7\x64\x34\xa8\x86\x16\x4d\x13\x60\xa8\xe5\x36\x76\x24\xf6\x7c\x0f\x5f\x57\xb1\x3b\x03\x87\xb8\xca\x9d\x81\x1e\x4d\xbe\x33\x70\x38\x64\x1e\xd0\x94\x3b\x03\x0f\x86\x4c\xaf\x16\xbb\x33\xd0\x17\x32\xfd\x9a\x72\x27\x3d\x04\xc4\xd3\xa7\x98\x8b\xc8\x50\xf6\xc1\x0f\x60\xab\x5d\x43\x8b\xa4\x4f\xb3\xb5\x11\x13\xb5\x08\x7f\x7f\x06\x1b\x73\x74\xf1\x95\x77\xb6\xb7\xbb\xf8\xda\xfe\x6e\xb0\x3d\xb4\xd5\xfa\x55\xec\xa8\xf5\x9f\xe3\xfd\x6a\x9d\x8e\x00\x4a\x52\xea\x4e\xca\x43\x9b\x9a\xa4\xc9\x2f\x35\x8a\x77\x6a\x7c\x47\xc8\x43\x41\xc8\xc2\x2d\xb6\x84\xdf\x3d\xec\xa1\xae\x58\x7b\x71\x77\x25\xa3\x6a\x91\x44\x34\x9d\x61\xa4\xa8\x45\x07\x35\xf9\xd0\x8d\xa4\xac\xc9\x9a\xf4\x82\x31\xf2\x4c\x33\xbf\xf3\xdb\xdb\xdb\x4f\x9f\x69\xbc\xbf\xfb\x09\x20\x03\x9a\x97\x65\xcb\x3b\x3d\xcc\xac\x8e\xb0\x6e\xb4\x41\x75\x9c\x9a\x57\x04\x3b\xc7\xde\x6e\xbe\x06\xec\x31\x96\xfa\x77\xd8\xfe\xe6\x16\x9a\xfc\xb7\x58\x65\x84\xd6\x22\xe1\x0a\x4a\x20\xd1\x02\xce\xfd\x21\x80\x48\xd3\xa0\xe2\x2e\x10\x38\x42\x6b\x5c\x70\xaf\x37\x2c\x9e\xae\x29\x01\xd7\x66\x2e\x10\x0f\xd0\x93\x0d\x74\x68\xf6\xdd\xad\xd1\xa6\xb5\x87\x94\x80\xdb\x6b\x8d\xee\xb0\xa6\xd8\xe3\xfc\x65\x9b\x2e\x7d\x78\x9a\x84\xbb\x36\x3b\x03\x36\x73\x99\x6c\x66\x34\x3b\x3a\x3c\xc1\x10\x19\x26\x80\x73\x12\x70\xfc\x69\xe0\x8b\x12\xf0\x1d\x19\x38\x5e\xf2\x5d\xc3\xda\xf0\x98\xc4\x56\x1c\x70\x08\x70\xfc\xd1\x12\x7e\xd8\x11\x9c\x91\xc7\xaf\x3c\x5a\xcc\x03\xf8\x9f\x0e\x60\x55\x00\x8e\x4f\x9b\xf6\x5a\xb8\xcf\x0b\x00\xb9\x7e\x50\x88\xc6\xd8\x21\xf7\x53\x32\xca\xce\x2f\xe6\xfd\x18\x3f\x77\x81\x48\xf8\xc7\x8e\xef\x71\x00\x71\x1e\x45\x70\x7c\x91\x70\x2c\x88\xf6\x41\x31\x78\x2a\xe8\x12\x3e\x22\x29\x58\xe7\xbd\x45\x52\xd2\x7e\xd4\x25\x86\xff\x01\x79\x51\x50\x30\x27\x7c\x4e\x54\xf0\x13\xc2\xfa\xbf\xe6\xfd\x9b\xbc\xcf\x71\xfc\x19\x4e\xc7\xe4\x8b\x62\x1c\x39\xf9\xae\xa8\xe0\x37\xc8\x45\x51\xc1\x17\xc5\xcf\x89\x2a\x34\xdc\x86\x02\x5b\x66\x32\x83\x84\x21\x84\x23\x3f\x04\x93\x89\x49\xac\x2f\x73\x0b\x57\x65\x46\xff\x8d\xc0\xfa\xef\x73\xbc\x1f\x17\xc5\x04\xfe\x43\xb8\x06\x15\x77\x24\xa6\x15\xc5\x6d\x74\x63\x1f\xb9\x86\x07\xf0\x49\x79\x52\x52\x70\x58\xba\x28\xf6\xe3\xaa\x38\x29\xf5\xe3\x13\xe2\x24\xbf\x8c\x0c\xf0\xac\x82\x39\x39\x80\x9f\x08\xc0\x30\xe7\x08\x0e\xe0\xef\xc5\xd7\x65\xc6\x89\x38\x89\x39\xfc\x3a\x39\x89\x55\xde\xbf\xc9\xfb\x49\xde\xbf\x81\x55\x72\x12\x5f\x12\xca\xe4\x24\x46\xa5\xc7\xc9\x22\xbb\x25\xe0\xf3\xf8\x94\x60\x13\x82\x7f\xe7\xdc\x6f\xf5\x24\x25\x05\x04\x3f\xda\xc1\xe5\x8e\x71\x0e\x19\x78\x84\xe0\xd7\x42\xee\xc7\x62\x9d\x08\x78\xed\x78\xc0\x7d\x5f\x7c\x86\x48\xf8\xf2\x89\xc0\xe6\x57\xa4\xe7\x88\xc2\xa3\x2d\xc9\x8d\x5e\xc0\x59\xc2\xe8\x2d\x4e\xe7\x39\x9d\x27\x31\x24\x25\x02\x0d\xcc\xd3\x61\x24\xa5\x38\x3e\x84\xa4\x74\x00\xc3\xbc\x9f\xe0\xfd\x14\xef\x8b\xbc\x7f\x84\xf7\x1f\xe1\xbd\x81\xa4\x74\x04\xcf\xa1\x2c\x0f\xe0\x39\x94\xc4\x41\x18\xf8\x17\x21\x83\xe7\xf0\x51\x92\xc3\x13\xf8\x29\x26\xf1\x04\xee\x62\x0a\x4f\xe0\x65\xf9\xc3\xa8\xe3\x65\x79\x09\x5f\xc2\xdf\xe2\x31\x18\xe8\x96\x57\xf1\x57\xf8\x01\x28\x74\xee\xfd\x6b\x78\x51\xae\xe1\x6b\xd8\x42\x1d\x3a\xee\x0a\x83\xb8\x87\x97\xe5\xa7\xb1\x8f\x8f\xde\xc3\x01\xf9\x77\x70\x0f\x7f\xcc\x91\xb4\xf8\xbb\xe8\x42\x52\xfa\x53\x18\xf8\x86\xf0\x65\xf4\x86\x34\x11\xbf\x89\x7b\x78\x55\x7e\x0b\xdf\xc3\x9f\xe1\x2d\xdc\x83\x20\xff\x1b\x3e\x8b\x07\xc8\x20\xa7\xff\x13\x9f\x85\x46\x06\xf1\x03\x1c\x93\xdf\xe6\x88\x44\xbe\x87\x7f\x10\xe2\xe4\xc7\x78\x5b\x7a\x0b\xff\x8b\x2f\xa0\x8f\x10\xf2\x97\xe2\x09\x72\x82\xfb\x8d\x91\xff\x96\xc6\x89\x46\x2e\x8b\xe7\x49\x8c\x38\x18\x27\x27\xf0\x27\x98\x21\xf7\xf0\x23\xa1\x48\x4e\xe0\xa3\xf2\x3c\xc9\xa0\x03\x2f\x92\x0c\x92\xf8\x7d\x92\xc1\x83\xf8\x0a\xc9\xe0\x38\xfe\x8e\x64\x30\x04\x51\xc8\x60\x14\x9a\x90\xc1\xc3\xe8\x17\x32\x98\xc1\x90\x90\xc1\xaf\x72\xbc\x04\x51\x38\x08\x13\x6f\x62\x3f\x79\x88\x7c\x0a\x5f\xc0\xd7\x91\x25\xd2\x6d\xf0\x95\xd4\x6a\xdf\x66\xd7\x07\x08\xcd\x3b\xdc\x32\x99\xe5\xa4\xd4\x76\xab\x5b\x26\x77\xc5\x06\xd6\x92\x7b\x5d\x0a\xb0\x76\xdd\x4f\x4b\x7b\xe5\x86\xc5\xbd\x72\x93\xa1\x1c\x9a\xb1\x2c\x93\x55\x4e\x3e\x8a\xed\x00\x98\x35\x3c\x7f\x75\x18\xc5\x25\xaa\x57\x16\x2c\xb3\x9e\x37\xca\xbe\x61\x5b\xba\x5b\x5f\x1d\xc1\xe5\x9a\x55\x5e\x1d\xc5\xf9\x39\xbb\x52\x33\xe9\xaf\x60\x89\x6e\x18\x9e\x4f\xdd\xa9\xd9\x19\x94\x6e\xea\x2e\xad\x2c\xd5\x2c\xdf\xa8\xd2\x29\xc7\x29\xe6\x31\xb5\xb8\xb8\x32\x3d\x55\x2a\xa0\x54\xf7\x7c\x5a\xcd\x14\x17\x30\x5b\x9c\x5e\xc9\x17\x97\x0a\x33\xcb\x0b\x4b\xc5\x42\x09\x1b\xd4\x5f\x59\x28\xdd\xc0\x15\xea\xe7\x75\x5f\x6f\x48\xce\xd8\xa6\x49\xb9\x63\x2f\x73\x85\x5a\xd4\x35\xca\x58\x76\xeb\xb3\xb6\x5e\xc1\x54\xa5\x82\xa2\xb7\xa8\xfb\x37\x97\x6c\xdb\xa7\x15\xa6\x3b\x47\xfd\x9b\x76\x05\x33\x2e\xd5\x7d\x5a\xb4\x3c\x5f\xb7\xca\x14\x45\x6f\x47\x50\x73\x76\x85\xa2\x68\x6d\xda\x8f\x53\x84\xd0\x72\xdd\xa1\x57\x75\xab\x62\x52\x66\x85\x71\x97\x5d\xbb\x1a\x22\x97\x0d\x93\xf2\x00\xe7\xf5\x6a\x40\xcc\xd4\x4c\xbf\xe6\x52\xce\x4f\x79\x1e\xad\xae\x99\x75\xce\xe8\xed\x4c\xc5\x34\x2d\xf6\x0c\x73\x09\x5d\x35\x1c\x20\x88\x75\x5a\xf7\x28\xf2\x74\xad\xb6\xb1\xa1\xaf\x99\x74\xca\xf7\x5d\x63\xad\xe6\xb7\xec\x2e\x1b\x7e\x3b\xbc\xac\xbb\x1b\xd4\xbf\xec\xea\x55\xfa\xa4\xed\x3e\xbe\x57\x9e\x45\x7b\x8d\xba\x9e\x61\x5b\x7b\x07\x8b\xd6\xba\xed\x56\x75\x3e\x93\xe6\xbb\x4a\xcd\xd8\xd6\xba\xb1\x51\x73\xb9\x5c\x6b\x78\xc6\xae\x3a\x86\xc9\xc1\x25\x6a\xea\x5b\x9c\xf2\xf6\xaa\x2f\xba\x76\xa5\x56\xf6\xef\x67\xb7\xea\xe8\x56\xbd\x35\x10\x96\x84\xe3\xbe\xb1\x66\x98\x86\xdf\x36\x5a\xb4\x0c\xdf\xd0\x4d\xe3\x37\x77\x97\x30\x13\x46\x6e\x58\x1b\xf0\xdc\xea\x9c\xee\x38\x8c\x5c\xb6\x83\x43\x12\x7a\xa5\xb2\xb2\x44\x3d\xdb\xdc\x64\xdc\x15\xea\x5f\xae\x99\x26\x5b\x28\x60\x0b\x87\xcd\x6c\x33\x54\x06\x16\xac\x8a\x77\xdd\xf0\x6f\xa2\xe4\xeb\xae\x5f\x73\xae\xda\xf6\xe3\x3b\x6d\x3c\x6a\x55\x75\x4b\xdf\xa0\x95\xbc\x69\xc2\x5a\x33\x6d\xbd\x42\xdd\x4c\xc5\x34\xe1\x51\x7f\xa5\xe8\xd3\x6a\x6b\x69\x67\xd8\x04\x04\x1c\x8a\xde\x42\x69\xd1\xd4\x7d\x56\x74\xbe\x70\x66\xed\x32\xaf\xda\xee\x84\x8a\x96\x4f\x5d\xdb\x29\x51\x77\xd3\x28\x53\xaf\x81\xb7\x4d\x57\x53\x83\xae\x87\x6f\x44\xb8\x80\x98\x0c\x1e\xa3\xae\xbd\xdb\xe6\x2c\x8f\x12\xf3\xd3\x21\xd1\x88\x1b\xed\xd9\x04\x29\x52\x17\x73\x01\xd4\x28\x4c\x13\x9f\x2a\xfb\xc6\xa6\xee\xdb\x2e\x32\x65\xd6\x17\x2d\x7f\xd1\x77\x1b\xbe\xf2\x86\xbe\x61\xd9\x9e\x6f\x94\x3d\x38\xae\xbd\x46\xbd\xf7\xc9\x6c\xf7\x70\xb0\xa6\xa8\xdb\x1c\x0f\x5e\x05\xc3\xda\x60\x6f\xe9\x1e\xf1\xc2\x96\x4f\x2d\x36\xf5\x1e\x5a\x5b\x43\x1b\x98\x9f\x9d\x65\xaf\xde\x35\xdd\x35\x82\xd5\x79\x9f\x8d\x04\xc1\x2a\x29\x39\xa6\xe1\x2f\x38\x01\x54\xd8\x32\x3c\xdf\xe3\x53\x74\xdd\xb0\x2a\xf6\x93\xcc\xbe\x55\xd6\x7d\x2c\xac\x7d\x8c\x96\x7d\x70\x69\x3e\x9e\xa7\xeb\x7a\xcd\xf4\xd9\xb2\xba\xa6\x9b\x35\xba\xe0\x36\x90\x46\xed\x58\xbd\x67\x6c\x8b\x7f\x35\x98\x72\x9c\x06\x59\x0e\x9f\xcb\xf6\x94\xeb\xea\x75\x66\xa0\xb0\x45\xcb\x35\xdf\xb0\x36\x1a\xaa\xcd\x0d\x04\xf3\xba\x6f\x6c\xd2\x59\x63\xcd\xd5\xdd\x3a\x77\xcc\x76\x8a\xbc\xe1\x52\x36\x0d\x75\xd8\xce\x4a\xe1\x89\x9a\xce\xde\x18\x46\x17\x2d\xda\xe0\x8a\xde\x7c\xcd\x34\x17\xdc\x42\xd5\xf1\xeb\x98\xa7\xfe\x34\xd5\x6b\x7e\x9d\xfd\xa0\x9a\xc7\x34\x66\x61\x43\x47\x05\x14\x2e\x30\x30\x0f\x0a\x1f\xd3\xfc\xa4\xae\xc1\x47\x1d\x19\xec\x91\x3a\xb4\x04\x8a\x0d\x18\xf0\xe0\x73\x64\x0a\xb3\x98\x61\x47\xd9\xd1\xbd\xfa\xb3\x30\xb0\x06\x0f\x79\x18\x4c\x77\x6c\xaf\x44\x09\x37\xa1\xc3\x05\x45\x05\x4b\xa8\xc1\x82\x0f\x03\x55\x50\xcc\xc1\xe6\x3e\xd1\xb7\x57\x6b\x0a\x0e\x1c\x14\x91\x07\x64\x0b\x36\xf0\xf0\xcf\x66\x59\xe7\xfa\x06\x2c\x6c\x00\xe2\x19\x40\x33\x61\xa3\x0c\x1d\x26\x28\x3c\x9c\x01\x62\x19\x54\x60\xb2\xfb\xf7\xe1\x33\xf0\xe0\xa2\x8a\x15\x58\xd0\xb9\x95\x4d\xd0\x50\x86\x62\x8b\xc5\x18\x31\x79\xa6\xe8\x64\x5a\x75\x84\x5c\x24\x03\x8f\x45\x07\xe0\xbb\x0b\xfd\x07\x5f\xed\xfd\xd8\xdc\x1f\xfd\xd7\x27\xbf\xf9\xf1\x83\xff\x78\x18\x52\x8a\x90\xa8\x98\x02\x91\x53\x84\x68\x1a\x63\xd5\x58\x44\x4a\x8c\x25\x26\x12\x17\x7a\xe5\x94\x40\x54\x41\x02\x12\x05\x31\x05\x55\x4e\x91\x44\x81\xf7\x13\xaa\x02\x92\x98\xd0\x1e\x89\xa6\x84\xc4\x05\xb5\x2f\x31\x11\x81\x20\x24\x26\xc2\xe7\x85\xc4\x05\x19\xa4\x37\x31\xc1\x54\xc7\x94\x94\xd0\xdb\xdb\xd7\x1b\x8d\x48\x7d\x6a\x54\xed\x53\x45\x40\x95\x40\x7a\x55\x19\x82\xa0\xaa\xca\xc1\xc4\x94\xa0\xaa\x91\x94\xd0\xa7\x8a\x1a\x8d\xa4\x04\x92\x44\x92\xc4\x0f\x26\x0c\x31\x31\x96\x28\x26\x0a\x2c\x8c\xde\x9e\xce\x14\x21\x2d\x2c\xca\xc9\x82\xda\xd3\xd1\x80\x0b\x6a\x4f\x67\x24\xce\x5c\x84\x4d\x02\x11\x54\x05\x22\xa3\x65\x08\xaa\xaa\xee\x3f\x20\x08\xfd\xe4\x60\xa2\x26\xf4\xa3\x9f\xf4\x43\x8a\x0b\x6c\x88\xa8\x7d\x4c\x58\x55\x3b\x23\x31\xae\xcf\xbb\x1e\x85\x85\x77\xa0\x47\x50\x7a\xa2\x11\xe1\x60\x62\x8e\xa8\x82\xcc\x1f\xec\x17\xe4\xed\x67\x15\x10\x41\xbb\xfd\x2c\x2b\x5c\x92\xd5\x51\x50\xe5\x14\xfa\x92\x88\xbe\x72\x71\xe5\x13\xda\x3f\xc7\x27\x05\x45\x15\x14\x21\x12\xe6\x27\x2a\x3c\x73\x5e\xe8\xc4\x18\xab\x5b\x81\x65\xa2\xa4\x84\x1e\x56\x54\x90\x3e\x55\x8d\x92\xf0\xab\x5f\x3f\xbb\x2e\x2d\x0b\xdd\xd7\x5d\xdd\x99\x67\xdb\x49\x99\xf2\x6d\x61\xf9\xa6\x6b\x3f\xe9\x91\x28\x09\x3f\xf6\x4d\x13\xf4\x64\xe6\x0b\xcb\x33\xb6\xcb\x2e\x36\xa7\xc2\x53\xe8\xc2\xe6\x68\x26\x4b\xb0\xac\x76\x35\x4f\xe5\xbc\xe1\x39\xa6\xce\x6f\x01\x9d\x4c\x23\xc5\x54\x52\xa3\x99\x6c\x27\x41\xb4\xb9\x0f\x63\x1f\x41\x64\x89\x9a\x94\x5d\x01\x38\x33\x9c\x19\xcd\x64\x33\x59\x60\x94\x20\xc3\x99\xa1\xca\x48\x76\xec\xdc\xfa\x58\xe5\x6c\x65\x6d\x38\x4b\x73\xe3\xc3\x67\x47\xd7\xd7\x2b\xeb\x74\x6c\x24\x97\xcb\x96\x87\x87\x27\xb2\xe3\xb4\x3c\x32\x76\x76\xd7\xb7\xbd\x03\xbb\xf8\x4a\xae\x45\x3f\xdd\xf8\x3e\x7b\x9f\xe6\xe4\xda\xb9\x95\x19\xdb\xcd\x9b\xe6\x9c\x6e\x58\xa8\x7a\x65\xdb\xa5\x94\x9f\x7a\xac\x6d\x0f\x20\xb5\xc7\xcd\x2f\xdb\xff\x5b\x23\xbc\xf8\x3d\xc1\x57\xf4\x1d\x38\xbb\xe7\x67\xef\x83\x23\xfc\x76\x7c\xe3\x12\xd0\xd5\xf6\x23\xa4\x4b\x64\x93\x7e\x0d\x25\xac\xe0\x1a\x0a\x58\x42\x09\x45\x2c\x60\x1e\x2b\x28\x62\x1e\x97\x83\xaf\xee\xf8\x86\xf4\xf6\x3b\xc1\xef\x97\xc0\x56\xe3\x79\x31\xb4\x23\xed\xfd\x2c\xce\x76\x6b\x10\x5c\xe3\xbb\xf2\x65\x18\x7c\xaf\x2d\xc2\xc2\x7a\xb8\x47\x9e\xe0\x5a\xcb\x70\xa1\xc3\x82\x07\x33\xdc\x6d\x6d\x58\xa1\x85\x57\x24\x5f\xe0\xbf\x73\xe1\xc3\x0d\xf7\xef\xbd\x96\x16\xb9\x4c\xb6\xf9\x2f\x87\x35\x56\x03\x8c\x20\x06\x82\x19\xd8\xa8\xc2\xe1\x3e\xea\x98\x87\xce\xcf\x04\xd6\x2c\xac\xc1\x6c\x3f\xeb\x00\x4c\x72\x9d\x86\x8f\x3c\x3f\x1d\xca\xdc\xb7\xb3\x23\xb6\xfb\xe9\x66\x11\x6d\xd3\xbd\xc6\x71\xaf\x4d\x67\x18\xec\x37\x63\x06\x59\xfe\xc7\x7c\x75\x82\xf0\x3c\x82\x93\xd5\xe2\xe7\x51\x2b\xc2\xdd\x3e\x9a\x27\x14\x80\x34\xff\x4d\x37\xcb\xcf\x66\xa6\xc5\xb2\x74\x50\xe7\x91\x6e\xe0\x26\xfc\xf0\x35\x9f\xe6\x3e\x16\x42\xdc\x08\x7d\x34\x62\xb4\x3e\x90\xaf\xa0\x8e\x8b\x70\xf9\x09\x5d\x43\x19\xfe\xfb\xd6\xf1\x19\x9c\xd9\xa3\xb3\xbb\x22\xad\x7a\x0c\xa1\x82\x11\x64\x31\x86\x73\x58\xc7\x18\x2a\x38\x8b\x0a\xd6\x30\x8c\x2c\x28\x72\x18\xc7\x30\xce\x62\x14\xeb\x58\x47\x05\xeb\xa0\x18\xc3\x08\x72\xc8\x21\x8b\x32\x86\x31\x8c\x09\x64\x31\x0e\x8a\x32\x46\x30\x86\x60\x47\x3c\xc7\xe7\x63\x0a\x1e\x3c\x50\x54\x79\x94\x75\xa4\xde\x23\x8e\x60\x5e\x7e\x21\x5b\x36\xf8\x5e\xf8\x99\xdc\xcf\x3b\x90\x5f\xb6\x9f\x47\xfb\xbf\x00\x00\x00\xff\xff\x2c\xb4\xab\x59\x00\x1e\x00\x00")

func nbloaderNbloaderDllBytes() ([]byte, error) {
	return bindataRead(
		_nbloaderNbloaderDll,
		"nbloader/nbloader.dll",
	)
}

func nbloaderNbloaderDll() (*asset, error) {
	bytes, err := nbloaderNbloaderDllBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "nbloader/nbloader.dll", size: 7680, mode: os.FileMode(438), modTime: time.Unix(1729670965, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"nbloader/nbloader.dll": nbloaderNbloaderDll,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"nbloader": &bintree{nil, map[string]*bintree{
		"nbloader.dll": &bintree{nbloaderNbloaderDll, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
